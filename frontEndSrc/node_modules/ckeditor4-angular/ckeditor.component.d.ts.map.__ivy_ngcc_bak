{"version":3,"file":"ckeditor.component.d.ts","sources":["D:/Users/Roy/workspace/calltreeadmin/frontEndSrc/node_modules/ckeditor4-angular/ckeditor.component.d.ts"],"sourcesContent":["/**\r\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\r\n * For licensing, see LICENSE.md.\r\n */\r\nimport { NgZone, EventEmitter, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { CKEditor4 } from './ckeditor';\r\nexport declare class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\r\n    private elementRef;\r\n    private ngZone;\r\n    /**\r\n     * The configuration of the editor.\r\n     * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.html\r\n     * to learn more.\r\n     */\r\n    config?: CKEditor4.Config;\r\n    /**\r\n     * Tag name of the editor component.\r\n     *\r\n     * The default tag is `textarea`.\r\n     */\r\n    tagName: string;\r\n    /**\r\n     * The type of the editor interface.\r\n     *\r\n     * By default editor interface will be initialized as `divarea` editor which is an inline editor with fixed UI.\r\n     * You can change interface type by choosing between `divarea` and `inline` editor interface types.\r\n     *\r\n     * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\r\n     * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\r\n     * to learn more.\r\n     */\r\n    type: CKEditor4.EditorType;\r\n    /**\r\n     * Keeps track of the editor's data.\r\n     *\r\n     * It's also decorated as an input which is useful when not using the ngModel.\r\n     *\r\n     * See https://angular.io/api/forms/NgModel to learn more.\r\n     */\r\n    data: string;\r\n    /**\r\n     * When set `true`, the editor becomes read-only.\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\r\n     * to learn more.\r\n     */\r\n    readOnly: boolean;\r\n    /**\r\n     * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\r\n     * event.\r\n     */\r\n    ready: EventEmitter<CKEditor4.EventInfo>;\r\n    /**\r\n     * Fires when the editor data is loaded, e.g. after calling setData()\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\r\n     * editor's method. It corresponds with the `editor#dataReady`\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\r\n     */\r\n    dataReady: EventEmitter<CKEditor4.EventInfo>;\r\n    /**\r\n     * Fires when the content of the editor has changed. It corresponds with the `editor#change`\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\r\n     * event. For performance reasons this event may be called even when data didn't really changed.\r\n     * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\r\n     * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\r\n     */\r\n    change: EventEmitter<CKEditor4.EventInfo>;\r\n    /**\r\n     * Fires when the content of the editor has changed. In contrast to `change` - only emits when\r\n     * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\r\n     *\r\n     * See more: https://angular.io/guide/template-syntax#two-way-binding---\r\n     */\r\n    dataChange: EventEmitter<CKEditor4.EventInfo>;\r\n    /**\r\n     * Fires when the editing view of the editor is focused. It corresponds with the `editor#focus`\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\r\n     * event.\r\n     */\r\n    focus: EventEmitter<CKEditor4.EventInfo>;\r\n    /**\r\n     * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\r\n     * event.\r\n     */\r\n    blur: EventEmitter<CKEditor4.EventInfo>;\r\n    /**\r\n     * The instance of the editor created by this component.\r\n     */\r\n    instance: any;\r\n    /**\r\n     * If the component is read–only before the editor instance is created, it remembers that state,\r\n     * so the editor can become read–only once it is ready.\r\n     */\r\n    private _readOnly;\r\n    /**\r\n     * A callback executed when the content of the editor changes. Part of the\r\n     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\r\n     *\r\n     * Note: Unset unless the component uses the `ngModel`.\r\n     */\r\n    onChange?: (data: string) => void;\r\n    /**\r\n     * A callback executed when the editor has been blurred. Part of the\r\n     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\r\n     *\r\n     * Note: Unset unless the component uses the `ngModel`.\r\n     */\r\n    onTouched?: () => void;\r\n    private _data;\r\n    /**\r\n     * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\r\n     *\r\n     * Defaults to 'https://cdn.ckeditor.com/4.13.1/standard-all/ckeditor.js'\r\n     */\r\n    editorUrl: string;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    writeValue(value: string): void;\r\n    registerOnChange(callback: (data: string) => void): void;\r\n    registerOnTouched(callback: () => void): void;\r\n    private createEditor;\r\n    private subscribe;\r\n    private propagateChange;\r\n    private ensureDivareaPlugin;\r\n    private removePlugin;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;"}