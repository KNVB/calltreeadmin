{"version":3,"sources":["D:/Users/Roy/workspace/calltreeadmin/frontEndSrc/node_modules/ckeditor4-angular/fesm2015/ckeditor4-angular.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA4QE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qDAwCmD,AAa/B;;;;;;;;;;;;;;EAYpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOiB","file":"ckeditor4-angular.js","sourcesContent":["import { __decorate } from 'tslib';\r\nimport { EventEmitter, ElementRef, NgZone, Input, Output, Component, forwardRef, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\r\nimport loadScript from 'load-script';\r\n\r\n/**\r\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\r\n * For licensing, see LICENSE.md.\r\n */\r\nlet promise;\r\nfunction getEditorNamespace(editorURL) {\r\n    if (editorURL.length < 1) {\r\n        throw new TypeError('CKEditor URL must be a non-empty string.');\r\n    }\r\n    if ('CKEDITOR' in window) {\r\n        return Promise.resolve(CKEDITOR);\r\n    }\r\n    else if (!promise) {\r\n        promise = new Promise((scriptResolve, scriptReject) => {\r\n            loadScript(editorURL, err => {\r\n                if (err) {\r\n                    scriptReject(err);\r\n                }\r\n                else {\r\n                    scriptResolve(CKEDITOR);\r\n                    promise = undefined;\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return promise;\r\n}\r\n\r\n/**\r\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\r\n * For licensing, see LICENSE.md.\r\n */\r\nvar CKEditorComponent_1;\r\nlet CKEditorComponent = CKEditorComponent_1 = class CKEditorComponent {\r\n    constructor(elementRef, ngZone) {\r\n        this.elementRef = elementRef;\r\n        this.ngZone = ngZone;\r\n        /**\r\n         * Tag name of the editor component.\r\n         *\r\n         * The default tag is `textarea`.\r\n         */\r\n        this.tagName = 'textarea';\r\n        /**\r\n         * The type of the editor interface.\r\n         *\r\n         * By default editor interface will be initialized as `divarea` editor which is an inline editor with fixed UI.\r\n         * You can change interface type by choosing between `divarea` and `inline` editor interface types.\r\n         *\r\n         * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\r\n         * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\r\n         * to learn more.\r\n         */\r\n        this.type = \"classic\" /* CLASSIC */;\r\n        /**\r\n         * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\r\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\r\n         * event.\r\n         */\r\n        this.ready = new EventEmitter();\r\n        /**\r\n         * Fires when the editor data is loaded, e.g. after calling setData()\r\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\r\n         * editor's method. It corresponds with the `editor#dataReady`\r\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\r\n         */\r\n        this.dataReady = new EventEmitter();\r\n        /**\r\n         * Fires when the content of the editor has changed. It corresponds with the `editor#change`\r\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\r\n         * event. For performance reasons this event may be called even when data didn't really changed.\r\n         * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\r\n         * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\r\n         */\r\n        this.change = new EventEmitter();\r\n        /**\r\n         * Fires when the content of the editor has changed. In contrast to `change` - only emits when\r\n         * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\r\n         *\r\n         * See more: https://angular.io/guide/template-syntax#two-way-binding---\r\n         */\r\n        this.dataChange = new EventEmitter();\r\n        /**\r\n         * Fires when the editing view of the editor is focused. It corresponds with the `editor#focus`\r\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\r\n         * event.\r\n         */\r\n        this.focus = new EventEmitter();\r\n        /**\r\n         * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\r\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\r\n         * event.\r\n         */\r\n        this.blur = new EventEmitter();\r\n        /**\r\n         * If the component is read–only before the editor instance is created, it remembers that state,\r\n         * so the editor can become read–only once it is ready.\r\n         */\r\n        this._readOnly = null;\r\n        this._data = null;\r\n        /**\r\n         * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\r\n         *\r\n         * Defaults to 'https://cdn.ckeditor.com/4.13.1/standard-all/ckeditor.js'\r\n         */\r\n        this.editorUrl = 'https://cdn.ckeditor.com/4.13.1/standard-all/ckeditor.js';\r\n    }\r\n    /**\r\n     * Keeps track of the editor's data.\r\n     *\r\n     * It's also decorated as an input which is useful when not using the ngModel.\r\n     *\r\n     * See https://angular.io/api/forms/NgModel to learn more.\r\n     */\r\n    set data(data) {\r\n        if (data === this._data) {\r\n            return;\r\n        }\r\n        if (this.instance) {\r\n            this.instance.setData(data);\r\n            // Data may be changed by ACF.\r\n            this._data = this.instance.getData();\r\n            return;\r\n        }\r\n        this._data = data;\r\n    }\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    /**\r\n     * When set `true`, the editor becomes read-only.\r\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\r\n     * to learn more.\r\n     */\r\n    set readOnly(isReadOnly) {\r\n        if (this.instance) {\r\n            this.instance.setReadOnly(isReadOnly);\r\n            return;\r\n        }\r\n        // Delay setting read-only state until editor initialization.\r\n        this._readOnly = isReadOnly;\r\n    }\r\n    get readOnly() {\r\n        if (this.instance) {\r\n            return this.instance.readOnly;\r\n        }\r\n        return this._readOnly;\r\n    }\r\n    ngAfterViewInit() {\r\n        getEditorNamespace(this.editorUrl).then(() => {\r\n            this.ngZone.runOutsideAngular(this.createEditor.bind(this));\r\n        }).catch(window.console.error);\r\n    }\r\n    ngOnDestroy() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            if (this.instance) {\r\n                this.instance.destroy();\r\n                this.instance = null;\r\n            }\r\n        });\r\n    }\r\n    writeValue(value) {\r\n        this.data = value;\r\n    }\r\n    registerOnChange(callback) {\r\n        this.onChange = callback;\r\n    }\r\n    registerOnTouched(callback) {\r\n        this.onTouched = callback;\r\n    }\r\n    createEditor() {\r\n        const element = document.createElement(this.tagName);\r\n        this.elementRef.nativeElement.appendChild(element);\r\n        if (this.type === \"divarea\" /* DIVAREA */) {\r\n            this.config = this.ensureDivareaPlugin(this.config || {});\r\n        }\r\n        const instance = this.type === \"inline\" /* INLINE */\r\n            ? CKEDITOR.inline(element, this.config)\r\n            : CKEDITOR.replace(element, this.config);\r\n        instance.once('instanceReady', evt => {\r\n            this.instance = instance;\r\n            // Read only state may change during instance initialization.\r\n            this.readOnly = this._readOnly !== null ? this._readOnly : this.instance.readOnly;\r\n            this.subscribe(this.instance);\r\n            const undo = instance.undoManager;\r\n            if (this.data !== null) {\r\n                undo && undo.lock();\r\n                instance.setData(this.data, { callback: () => {\r\n                        // Locking undoManager prevents 'change' event.\r\n                        // Trigger it manually to updated bound data.\r\n                        if (this.data !== instance.getData()) {\r\n                            undo ? instance.fire('change') : instance.fire('dataReady');\r\n                        }\r\n                        undo && undo.unlock();\r\n                        this.ngZone.run(() => {\r\n                            this.ready.emit(evt);\r\n                        });\r\n                    } });\r\n            }\r\n            else {\r\n                this.ngZone.run(() => {\r\n                    this.ready.emit(evt);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    subscribe(editor) {\r\n        editor.on('focus', evt => {\r\n            this.ngZone.run(() => {\r\n                this.focus.emit(evt);\r\n            });\r\n        });\r\n        editor.on('blur', evt => {\r\n            this.ngZone.run(() => {\r\n                if (this.onTouched) {\r\n                    this.onTouched();\r\n                }\r\n                this.blur.emit(evt);\r\n            });\r\n        });\r\n        editor.on('dataReady', this.propagateChange, this);\r\n        if (this.instance.undoManager) {\r\n            editor.on('change', this.propagateChange, this);\r\n        }\r\n        // If 'undo' plugin is not loaded, listen to 'selectionCheck' event instead. (#54).\r\n        else {\r\n            editor.on('selectionCheck', this.propagateChange, this);\r\n        }\r\n    }\r\n    propagateChange(event) {\r\n        this.ngZone.run(() => {\r\n            const newData = this.instance.getData();\r\n            if (event.name == 'change') {\r\n                this.change.emit(event);\r\n            }\r\n            else if (event.name == 'dataReady') {\r\n                this.dataReady.emit(event);\r\n            }\r\n            if (newData === this.data) {\r\n                return;\r\n            }\r\n            this._data = newData;\r\n            this.dataChange.emit(newData);\r\n            if (this.onChange) {\r\n                this.onChange(newData);\r\n            }\r\n        });\r\n    }\r\n    ensureDivareaPlugin(config) {\r\n        let { extraPlugins, removePlugins } = config;\r\n        extraPlugins = this.removePlugin(extraPlugins, 'divarea') || '';\r\n        extraPlugins = extraPlugins.concat(typeof extraPlugins === 'string' ? ',divarea' : 'divarea');\r\n        if (removePlugins && removePlugins.includes('divarea')) {\r\n            removePlugins = this.removePlugin(removePlugins, 'divarea');\r\n            console.warn('[CKEDITOR] divarea plugin is required to initialize editor using Angular integration.');\r\n        }\r\n        return Object.assign({}, config, { extraPlugins, removePlugins });\r\n    }\r\n    removePlugin(plugins, toRemove) {\r\n        if (!plugins) {\r\n            return null;\r\n        }\r\n        const isString = typeof plugins === 'string';\r\n        if (isString) {\r\n            plugins = plugins.split(',');\r\n        }\r\n        plugins = plugins.filter(plugin => plugin !== toRemove);\r\n        if (isString) {\r\n            plugins = plugins.join(',');\r\n        }\r\n        return plugins;\r\n    }\r\n};\r\nCKEditorComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone }\r\n];\r\n__decorate([\r\n    Input()\r\n], CKEditorComponent.prototype, \"config\", void 0);\r\n__decorate([\r\n    Input()\r\n], CKEditorComponent.prototype, \"tagName\", void 0);\r\n__decorate([\r\n    Input()\r\n], CKEditorComponent.prototype, \"type\", void 0);\r\n__decorate([\r\n    Input()\r\n], CKEditorComponent.prototype, \"data\", null);\r\n__decorate([\r\n    Input()\r\n], CKEditorComponent.prototype, \"readOnly\", null);\r\n__decorate([\r\n    Output()\r\n], CKEditorComponent.prototype, \"ready\", void 0);\r\n__decorate([\r\n    Output()\r\n], CKEditorComponent.prototype, \"dataReady\", void 0);\r\n__decorate([\r\n    Output()\r\n], CKEditorComponent.prototype, \"change\", void 0);\r\n__decorate([\r\n    Output()\r\n], CKEditorComponent.prototype, \"dataChange\", void 0);\r\n__decorate([\r\n    Output()\r\n], CKEditorComponent.prototype, \"focus\", void 0);\r\n__decorate([\r\n    Output()\r\n], CKEditorComponent.prototype, \"blur\", void 0);\r\n__decorate([\r\n    Input()\r\n], CKEditorComponent.prototype, \"editorUrl\", void 0);\r\nCKEditorComponent = CKEditorComponent_1 = __decorate([\r\n    Component({\r\n        selector: 'ckeditor',\r\n        template: '<ng-template></ng-template>',\r\n        providers: [\r\n            {\r\n                provide: NG_VALUE_ACCESSOR,\r\n                useExisting: forwardRef(() => CKEditorComponent_1),\r\n                multi: true,\r\n            }\r\n        ]\r\n    })\r\n], CKEditorComponent);\r\n\r\n/**\r\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\r\n * For licensing, see LICENSE.md.\r\n */\r\n\r\n/**\r\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\r\n * For licensing, see LICENSE.md.\r\n */\r\nlet CKEditorModule = class CKEditorModule {\r\n};\r\nCKEditorModule = __decorate([\r\n    NgModule({\r\n        imports: [FormsModule, CommonModule],\r\n        declarations: [CKEditorComponent],\r\n        exports: [CKEditorComponent]\r\n    })\r\n], CKEditorModule);\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CKEditorComponent, CKEditorModule };\r\n\r\n"]}